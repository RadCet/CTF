# -*- coding: utf-8 -*-
import string
import base64
import itertools

from Crypto.Hash import SHA256
from Crypto.Hash import MD5

from pwn import *

def pad(msg):
    pad_length = 16 - len(msg) % 16
    return msg + chr(pad_length) * pad_length

def unpad(msg):
    return msg[:-ord(msg[-1])]

def str2num(text):
    number = 0
    for word in text:
        number = number * 256 + ord(word)
    return number

def num2str(number):
    text = ""
    for i in xrange(16):
        text += chr(number % 256)
        number /= 256
    return text[::-1]

r = remote('52.193.157.19', 9999)
line = r.recvuntil('\n').strip()
tail = line.split('+')[1].split(')')[0]
result = line.split(' == ')[1].strip()
r.recvuntil(':')

print "proof of work..."

for word in itertools.product(string.ascii_letters+string.digits, repeat = 4):
    head = ''.join(word)
    if result == SHA256.new(head+tail).hexdigest():
        r.sendline(head)
        break

r.recvuntil('\n')
IV = '2jpmLoSsOlQrqyqE'
welcome_pla = pad('Welcome!!')
welcome_enc = base64.b64decode(r.recvuntil('\n').strip())[16:]

def alter_plain(iv, cipher, plain, start):
    assert(len(cipher) % 16 == 0)
    assert(len(plain) == 16)
    IV_new = num2str(str2num(iv) ^ str2num(plain) ^ str2num(start))
    msg_new = base64.b64encode(IV_new + cipher)
    return msg_new

print "get all kind of value..."

options = ["get-flag", "get-md5", "get-sha1", "get-sha256", "get-hmac", "else"]
ans = {}
for option in options:
    enc = alter_plain(IV, welcome_enc, welcome_pla, pad(option))
    r.sendline(enc)
    ans[option] = base64.b64decode(r.recvuntil('\n').strip())[16:]
    print option, base64.b64encode(ans[option]), len(ans[option])

print "get flag..."

flag = ""
for i in xrange(1, 26):
    flag_16 = "hitcon{" + '\x00' * 9
    cipher = ans["get-flag"]
    base = ord(cipher[31]) ^ 0x10
    cipher = cipher[:32] + cipher[16:]
    cipher = cipher[:47] + chr(base ^ (57-i)) + cipher[48:]
    enc = alter_plain(IV, cipher, flag_16, "get-md5" + '\x00' * 9)
    r.sendline(enc)
    result = base64.b64decode(r.recvuntil('\n').strip())[16:]
    
    for ch in string.printable[:-5]:
        enc = alter_plain(IV, result, MD5.new(flag + ch).digest(), "get-md5" + '\x00' * 9)
        r.sendline(enc)
        out = base64.b64decode(r.recvuntil('\n').strip())[16:]
        if out != ans["else"]:
            flag += ch
            print "hitcon{" + flag
            break
